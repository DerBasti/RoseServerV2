#include "CharServer.h"
#include "CharClient.h"

CharServer::CharServer(String ip, WORD port, MYSQL* sql) : ROSEServer(ip, port, sql) {

}

CharServer::~CharServer() {

}

NetworkClient* CharServer::onClientConnected(NetworkInterface *iFace) {
	return new CharClient(iFace, this->getCryptInfo());
}

void CharServer::loadEncryption() {
	GenerateCryptTables(this->getCryptInfo().table, CharServer::DEFAULT_ENCRYPTION_KEY);
}

bool CharServer::updateLastPlayedChar(const unsigned long accId, const unsigned long charId) {
	Statement stm(CharServer::getDB(), DBQueries::Update::LAST_PLAYED_CHAR);
	stm.setInt(charId);
	stm.setInt(accId);
	return stm.execute();
}

bool CharServer::addCharacter(const unsigned long accId, Character& newChar) {
	Statement stm(CharServer::getDB(), DBQueries::Insert::ADD_CHARACTER);
	stm.setInt(accId);
	stm.setString(newChar.name);
	stm.setInt(newChar.level);
	stm.setInt(newChar.classId);
	stm.setInt(newChar.faceStyle);
	stm.setInt(newChar.hairStyle);
	stm.setInt(newChar.sex);
	stm.setCallbackFunction([&]() {
		newChar.id = stm.getAutoGeneratedKey();
	});
	stm.execute();

	this->addDefaultItems(newChar);

	Transaction transaction(CharServer::getDB());
	Item defaultItems[3] = { Item(2, 221 + static_cast<unsigned int>(newChar.sex)), Item(3, 30), Item(7, 1) };
	for (unsigned int i = 0; i < 3; i++) {
		Statement addingItemStatement(DBQueries::Insert::ADD_ITEM_MINIMALISTIC);
		addingItemStatement.setInt(newChar.id);
		addingItemStatement.setInt(defaultItems[i].itemType);
		addingItemStatement.setInt(defaultItems[i].toUniqueId());

		transaction.addStatement(addingItemStatement);
	}

	const char *queries[] = { DBQueries::Insert::ADD_DEFAULT_STATS, DBQueries::Insert::ADD_DEFAULT_SKILLS, DBQueries::Insert::ADD_DEFAULT_QUESTS };
	for (unsigned int i = 0; i < 3; i++) {
		Statement otherStatement(queries[i]);
		otherStatement.setInt(newChar.id);
		transaction.addStatement(otherStatement);
	}
	return transaction.execute();
}

bool CharServer::addDefaultItems(const Character& newChar) {
	return true;
}